% Trace channel response paths (FD and TD) of selected links
%
% Trace(x,links)
% x is an instance of a ChannelResponse class (this class) generated by the Universe.Channel method
% links are indece into x.linkMap. Indexed the same way as POV vectors x0 and x1 passed to Universe.Channel
%
%
% -------------------------------------------------------------------------
%     This is a part of the Qamcom Channel Model (QCM)
%     Copyright (C) 2017  Björn Sihlbom, QAMCOM Research & Technology AB
%     mailto:bjorn.sihlbom@qamcom.se, http://www.qamcom.se, https://github.com/qamcom/QCM 
% 
%     This program is free software: you can redistribute it and/or modify
%     it under the terms of the GNU General Public License as published by
%     the Free Software Foundation, either version 3 of the License, or
%     (at your option) any later version.
% 
%     This program is distributed in the hope that it will be useful,
%     but WITHOUT ANY WARRANTY; without even the implied warranty of
%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%     GNU General Public License for more details.
% 
%     You should have received a copy of the GNU General Public License
%     along with this program.  If not, see <http://www.gnu.org/licenses/>.
% -------------------------------------------------------------------------

function y=Trace(u,pov0,pov1,freqs,rain)

D  = sys.maxRadius*2/sys.c; % Max delay spread [sec] approx as twice emax ray trace distance.
Bc = 1/D; % Coherence bandwith https://en.wikipedia.org/wiki/Coherence_bandwidth
  
% Calculate channel grid with a number of samples around center.
freqs = mean(freqs)+(-10:10)*Bc;
x = u.Channels({pov0},{pov1},freqs,rain);

% Link
colormap('jet');
cc=colormap;
y = x.link{1};

% Endpoints
povs{1} = y.pov0;
povs{2} = y.pov1;

% Plot structures and endpoints

NN0 = y.pov0.agroup.n;
NN1 = y.pov1.agroup.n;


Pmax = -inf;
for nn0=1:NN0
    for nn1=1:NN1
        if isfield(y,'los') && ~isempty(y.los{nn0,nn1}) && isfield(y.los{nn0,nn1},'coeff')
            P     = 20*log10(rms(y.los{nn0,nn1}.coeff(:)));
            Pmax  = max(Pmax,max(P));
        end
        if isfield(y,'nlos') && ~isempty(y.nlos{nn0,nn1}) && isfield(y.nlos{nn0,nn1},'coeff')
            P     = 20*log10(rms(y.nlos{nn0,nn1}.coeff(:,:),2));
            Pmax  = max(Pmax,max(P));
        end
        if isfield(y,'n2los') && ~isempty(y.n2los{nn0,nn1}) && isfield(y.n2los{nn0,nn1},'coeff')
            P     = 20*log10(rms(y.n2los{nn0,nn1}.coeff(:,:),2));
            Pmax  = max(Pmax,max(P));
        end
        if isfield(y,'n3los') && ~isempty(y.n3los{nn0,nn1}) && isfield(y.n3los{nn0,nn1},'coeff')
            P     = 20*log10(rms(y.n3los{nn0,nn1}.coeff(:,:),2));
            Pmax  = max(Pmax,max(P));
        end
    end
end

clf;

pmax = -inf*ones(1,3);
pmin =  inf*ones(1,3);
%--------------------------------------------------------------------------

% LOS


for nn0=1:NN0
    pov0 = y.pov0.xyz(nn0);
    for nn1=1:NN1
        pov1 = y.pov1.xyz(nn1);
        
        pmax = max([pmax;pov0;pov1]);
        pmin = min([pmin;pov0;pov1]);
        
        
        % NLOS
        if isfield(y,'nlos') && ~isempty(y.nlos{nn0,nn1}) && isfield(y.nlos{nn0,nn1},'coeff')
            
            inds0 = y.nlos{nn0,nn1}.ind;
            P     = 20*log10(rms(y.nlos{nn0,nn1}.coeff(:,:),2));
            sel   = y.nlos{nn0,nn1}.sel;
            a0    = x.universe.GetAtoms(inds0);
            
            Pi = round((1+(P(:)'-Pmax)/sys.raySelThreshold)*length(cc));
            
            for ii=find(Pi(:)'>0),
                s0 = a0.surface(sel(ii),:);
                pmax = max([pmax;s0]);
                pmin = min([pmin;s0]);
            end
            
        end
        
        % N2LOS
        if isfield(y,'n2los') && ~isempty(y.n2los{nn0,nn1}) && isfield(y.n2los{nn0,nn1},'coeff')
            
            inds0 = y.n2los{nn0,nn1}.ind0;
            inds1 = y.n2los{nn0,nn1}.ind1;
            P     = 20*log10(rms(y.n2los{nn0,nn1}.coeff(:,:),2));
            sel   = y.n2los{nn0,nn1}.sel;
            a0    = x.universe.GetAtoms(inds0);
            a1    = x.universe.GetAtoms(inds1);
            
            Pi = round((1+(P-Pmax)/sys.raySelThreshold)*length(cc));
            
            for ii=find(Pi(:)'>0),
                s0 = a0.surface(sel(ii),:);
                s1 = a1.surface(sel(ii),:);
                pmax = max([pmax;s0;s1]);
                pmin = min([pmin;s0;s1]);
            end
            
        end
        
        % N3LOS
        if isfield(y,'n3los') && ~isempty(y.n3los{nn0,nn1}) && isfield(y.n3los{nn0,nn1},'coeff')
            
            inds0 = y.n3los{nn0,nn1}.ind0;
            inds1 = y.n3los{nn0,nn1}.ind1;
            P     = 20*log10(rms(y.n3los{nn0,nn1}.coeff(:,:),2));
            sel   = y.n3los{nn0,nn1}.sel;
            a0    = x.universe.GetAtoms(inds0);
            a1    = x.universe.GetAtoms(inds1);
            
            Pi = round((1+(P(:)'-Pmax)/sys.raySelThreshold)*length(cc));
            
            for ii=find(Pi(:)'>0),
                s0 = a0.surface(sel(ii),:);
                s1 = a1.surface(sel(ii),:);
                pmax = max([pmax;s0;s1]);
                pmin = min([pmin;s0;s1]);
            end
            
        end
        
    end
end
%--------------------------------------------------------------------------

x.universe.Plot(povs,[],[],[pmin;pmax]);
hold on;

for nn0=1:NN0
    pov0 = y.pov0.xyz(nn0);
    for nn1=1:NN1
        pov1 = y.pov1.xyz(nn1);
        
        % LOS
        if isfield(y,'los') && ~isempty(y.los{nn0,nn1}) && isfield(y.los{nn0,nn1},'coeff')
            P  = 20*log10(rms(y.los{nn0,nn1}.coeff(:)));
            Pi = round((1+(P(:)'-Pmax)/sys.raySelThreshold)*length(cc));
            if Pi>0
                line(...
                    'XData',[pov0(1);pov1(1)],...
                    'YData',[pov0(2);pov1(2)],...
                    'ZData',[pov0(3);pov1(3)],...
                    'Color',cc(Pi,:),'LineWidth',2);
            end
        end
        
        
        % NLOS
        if isfield(y,'nlos') && ~isempty(y.nlos{nn0,nn1}) && isfield(y.nlos{nn0,nn1},'coeff')
            
            inds0 = y.nlos{nn0,nn1}.ind;
            P     = 20*log10(rms(y.nlos{nn0,nn1}.coeff(:,:),2));
            sel   = y.nlos{nn0,nn1}.sel;
            a0    = x.universe.GetAtoms(inds0);
            
            Pi = round((1+(P(:)'-Pmax)/sys.raySelThreshold)*length(cc));
            
            %     for ii=1:size(inds0)
            %         s0 = a0.surface(ii,:);
            %         line(...
            %             'XData',[pov0(1);s0(1);pov1(1)],...
            %             'YData',[pov0(2);s0(2);pov1(2)],...
            %             'ZData',[pov0(3);s0(3);pov1(3)],...
            %             'Color','k','LineStyle',':');
            %     end
            for ii=find(Pi(:)'>0),
                s0 = a0.surface(sel(ii),:);
                line(...
                    'XData',[pov0(1);s0(1);pov1(1)],...
                    'YData',[pov0(2);s0(2);pov1(2)],...
                    'ZData',[pov0(3);s0(3);pov1(3)],...
                    'Color',cc(Pi(ii),:));
            end
            axis equal
            
        end
        
        % N2LOS
        if isfield(y,'n2los') && ~isempty(y.n2los{nn0,nn1}) && isfield(y.n2los{nn0,nn1},'coeff')
            
            inds0 = y.n2los{nn0,nn1}.ind0;
            inds1 = y.n2los{nn0,nn1}.ind1;
            P     = 20*log10(rms(y.n2los{nn0,nn1}.coeff(:,:),2));
            sel   = y.n2los{nn0,nn1}.sel;
            a0    = x.universe.GetAtoms(inds0);
            a1    = x.universe.GetAtoms(inds1);
            
            Pi = round((1+(P-Pmax)/sys.raySelThreshold)*length(cc));
            
            %     for ii=1:size(inds0)
            %         s0 = a0.surface(ii,:);
            %         s1 = a1.surface(ii,:);
            %         line(...
            %             'XData',[pov0(1);s0(1);s1(1);pov1(1)],...
            %             'YData',[pov0(2);s0(2);s1(2);pov1(2)],...
            %             'ZData',[pov0(3);s0(3);s1(3);pov1(3)],...
            %             'Color','k','LineStyle',':');
            %     end
            for ii=find(Pi(:)'>0),
                s0 = a0.surface(sel(ii),:);
                s1 = a1.surface(sel(ii),:);
                ll=line(...
                    'XData',[pov0(1);s0(1);s1(1);pov1(1)],...
                    'YData',[pov0(2);s0(2);s1(2);pov1(2)],...
                    'ZData',[pov0(3);s0(3);s1(3);pov1(3)],...
                    'Color',cc(Pi(ii),:));
                ll.DisplayName = sprintf('%d-%d',inds0(sel(ii)), inds1(sel(ii)));
                %selii=[inds0(sel(ii)) inds1(sel(ii))]
                %pause
                %ll.delete
            end
            
        end
        
        % N3LOS
        if isfield(y,'n3los') && ~isempty(y.n3los{nn0,nn1}) && isfield(y.n3los{nn0,nn1},'coeff')
            
            inds0 = y.n3los{nn0,nn1}.ind0;
            inds1 = y.n3los{nn0,nn1}.ind1;
            P     = 20*log10(rms(y.n3los{nn0,nn1}.coeff(:,:),2));
            sel   = y.n3los{nn0,nn1}.sel;
            a0    = x.universe.GetAtoms(inds0);
            a1    = x.universe.GetAtoms(inds1);
            
            Pi = round((1+(P(:)'-Pmax)/sys.raySelThreshold)*length(cc));
            
            for ii=find(Pi(:)'>0),
                s0 = a0.surface(sel(ii),:);
                s1 = a1.surface(sel(ii),:);
                line(...
                    'XData',[pov0(1);s0(1);s1(1);pov1(1)],...
                    'YData',[pov0(2);s0(2);s1(2);pov1(2)],...
                    'ZData',[pov0(3);s0(3);s1(3);pov1(3)],...
                    'Color',cc(Pi(ii),:),'LineStyle','--');
            end
            
        end
    end
end

Ns = 5;
Ps = linspace(Pmax-sys.raySelThreshold,Pmax,Ns+1);
for ii=1:Ns+1
    Labels{ii}=sprintf('%ddB',round(Ps(ii)));
end
a=colorbar;
Ticks = linspace(a.Limits(1),a.Limits(2),Ns+1);
colorbar('Ticks',Ticks,'TickLabels',Labels);
axis equal